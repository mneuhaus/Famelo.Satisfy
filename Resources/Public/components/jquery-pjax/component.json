{
  "name": "jquery-pjax",
  "version": "1.2.0",
  "main": "./jquery.pjax.js",
  "dependencies": {
    "jquery": ">=1.7"
  },
  "readme": "## pushState + ajax = pjax\n\n            .--.\n           /    \\\n          ## a  a\n          (   '._)\n           |'-- |\n         _.\\___/_   ___pjax___\n       .\"\\> \\Y/|<'.  '._.-'\n      /  \\ \\_\\/ /  '-' /\n      | --'\\_/|/ |   _/\n      |___.-' |  |`'`\n        |     |  |\n        |    / './\n       /__./` | |\n          \\   | |\n           \\  | |\n           ;  | |\n           /  | |\n     jgs  |___\\_.\\_\n          `-\"--'---'\n\n\n## what is it?\n\npjax loads HTML from your server into the current page\nwithout a full reload. It's ajax with real permalinks,\npage titles, and a working back button that fully degrades.\n\npjax enhances the browsing experience - nothing more.\n\nYou can find a demo on <http://pjax.heroku.com/>\n\n\n## three ways to pjax on the client side:\n\nOne. Functionally obtrusive, loading the href with ajax into data-pjax:\n\n```html\n<a href='/explore' data-pjax='#main'>Explore</a>\n```\n\n```js\n$(document).pjax('a[data-pjax]')\n```\n\n\nTwo. Slightly obtrusive, passing a container and binding an error handler:\n\n```html\n<a href='/explore' class='js-pjax'>Explore</a>\n```\n\n```js\n$('#main').pjax('.js-pjax').on('pjax:error', function(e, xhr, err) {\n  $('.error').text('Something went wrong: ' + err)\n})\n```\n\n\nThree. Unobtrusive, showing a 'loading' spinner:\n\n```html\n<div id='main'>\n  <div class='loader' style='display:none'><img src='spin.gif'></div>\n  <div class='tabs'>\n    <a href='/explore'>Explore</a>\n    <a href='/help'>Help</a>\n  </div>\n</div>\n```\n\n```js\n$('#main').pjax('a').on('pjax:send', function(){\n  $(this).showLoader()\n})\n```\n\n\n## $(container).pjax( link, options )\n\nThe `$(container).pjax(selector)` uses the jquery context as the\ndefault container pjax. The link selector is used to match against\ndelegated click events to start pjaxing.\n\nThe options are the same as jQuery's `$.ajax` options with the\nfollowing additions:\n\n* `container`      - The String selector of the container to load the\n                     reponse body. Must be a String.\n* `target`         - The Element that was clicked to start the pjax call.\n* `push`           - Whether to pushState the URL. Default: true (of course)\n* `replace`        - Whether to replaceState the URL. Default: false\n* `timeout`        - pjax sets this low, <1s. Set this higher if using a\n                     custom error handler. It's ms, so something like\n                     `timeout: 2000`\n* `fragment`       - A String selector that specifies a sub-element to\n                     be pulled out of the response HTML and inserted\n                     into the `container`. Useful if the server always returns\n                     full HTML pages.\n\n\n## $.pjax( options )\n\nYou can also just call `$.pjax` directly. It acts much like `$.ajax`, even\nreturning the same thing and accepting the same options.\n\nThe pjax-specific keys listed in the `$(link).pjax()` section work here\nas well.\n\nThis pjax call:\n\n```js\n$.pjax({\n  url: '/authors',\n  container: '#main'\n})\n```\n\nRoughly translates into this ajax call:\n\n```js\n$.ajax({\n  url: '/authors',\n  dataType: 'html',\n  beforeSend: function(xhr){\n    xhr.setRequestHeader('X-PJAX', 'true')\n  },\n  success: function(data){\n    $('#main').html(data)\n    history.pushState(null, $(data).filter('title').text(), '/authors')\n  })\n})\n```\n\n\n## pjax on the server side\n\nYou'll want to give pjax requests a 'chrome-less' version of your page.\nThat is, the page without any layout.\n\nAs you can see in the \"ajax call\" example above, pjax sets a custom 'X-PJAX'\nheader to 'true' when it makes an ajax request to make detecting it easy.\n\nIn Rails, check for `request.headers['X-PJAX']`:\n\n```ruby\ndef my_page\n  if request.headers['X-PJAX']\n    render :layout => false\n  end\nend\n```\n\nOr as a before filter in application controller:\n\n```ruby\nlayout :set_layout\n\nprivate\n  def set_layout\n    if request.headers['X-PJAX']\n      false\n    else\n      \"application\"\n    end\n  end\n```\n\nRails: <https://github.com/rails/pjax_rails>\n\nDjango: <https://github.com/jacobian/django-pjax>\n\nAsp.Net MVC3: <http://biasecurities.com/blog/2011/using-pjax-with-asp-net-mvc3/>\n\nFuelPHP: <https://github.com/rcrowe/fuel-pjax>\n\nGrails: <http://www.bobbywarner.com/2012/04/23/add-some-pjax-to-grails/>\n\nExpress: <https://github.com/abdelsaid/express-pjax-demo>\n\n\n## page titles\n\nYour HTML should also include a `<title>` tag if you want page titles to work.\n\nWhen using a page fragment, pjax will check the fragment DOM element\nfor a `title` or `data-title` attribute and use any value it finds.\n\n\n## events\n\npjax will fire two events on the container you've asked it to load your\nreponse body into:\n\n* `pjax:start` - Fired when a pjax ajax request begins.\n* `pjax:end`   - Fired when a pjax ajax request ends.\n\nThis allows you to, say, display a loading indicator upon pjaxing:\n\n```js\n$('#main').pjax('a.pjax')\n  .on('pjax:start', function() { $('#loading').show() })\n  .on('pjax:end',   function() { $('#loading').hide() })\n```\n\nBecause these events bubble, you can also set them on the document:\n\n```js\n$('#main').pjax('a.pjax')\n$(document)\n  .on('pjax:start', function() { $('#loading').show() })\n  .on('pjax:end',   function() { $('#loading').hide() })\n```\n\nIn addition, custom events are added to complement `$.ajax`'s\ncallbacks.\n\n* `pjax:beforeSend` - Fired before the pjax request begins. Returning\n                      false will abort the request.\n* `pjax:complete`   - Fired after the pjax request finishes.\n* `pjax:success`    - Fired after the pjax request succeeds.\n* `pjax:error`      - Fired after the pjax request fails. Returning\n                      false will prevent the the fallback redirect.\n* `pjax:timeout`    - Fired if after timeout is reached. Returning\n                      false will disable the fallback and will wait\n                      indefinitely until the response returns.\n\n**CAUTION** Callback handlers passed to `$.pjax` **cannot** be persisted\nacross full page reloads. Its recommended you use custom events instead.\n\n## browser support\n\npjax only works with browsers that support the history.pushState API.\n\nFor a table of supported browsers see: <http://caniuse.com/#search=pushstate>\n\nTo check if pjax is supported, use the `$.support.pjax` boolean.\n\nWhen pjax is not supported, `$('a').pjax()` calls will do nothing (aka links\nwork normally) and `$.pjax({url:url})` calls will redirect to the given URL.\n\n\n## install it\n\n```\n$ cd path/to/js\n$ wget https://raw.github.com/defunkt/jquery-pjax/master/jquery.pjax.js\n```\n\nThen, in your HTML:\n\n```html\n<script src=\"path/to/js/jquery.pjax.js\"></script>\n```\n\nReplace `path/to/js` with the path to your JavaScript directory,\ne.g. `public/javascripts`.\n\n\n## upgrade it\n\npjax 1.0 includes some breaking changes.\n\nThe main API was changed.\n\nOld: `$(link).pjax( container, options )`\n\nNew: `$(container).pjax( link, options )`\n\nInstead of this:\n\n    $('a[data-pjax]').pjax()\n\nDo this:\n\n    $(document).pjax('a[data-pjax]')\n\nThese options were removed:\n\n* `clickedElement` - Use `target` instead\n* `beforeSend` - Bind to `pjax:beforeSend` instead\n* `complete` - Bind to `pjax:complete` instead\n* `success` - Bind to `pjax:success` instead\n* `error` - Bind to `pjax:error` instead\n\nThese events were removed:\n\n* `pjax` - Use `pjax:start`\n* `start.pjax` - Use `pjax:start`\n* `end.pjax` - Use `pjax:end`\n\n\n## minimize it\n\n```\ncurl \\\n  -d output_info=compiled_code \\\n  -d compilation_level=SIMPLE_OPTIMIZATIONS \\\n  -d code_url=https://github.com/defunkt/jquery-pjax/raw/master/jquery.pjax.js \\\n  http://closure-compiler.appspot.com/compile\n```\n",
  "readmeFilename": "README.md",
  "_id": "pjax@1.2.0",
  "description": ".--.            /    \\           ## a  a           (   '._)            |'-- |          _.\\___/_   ___pjax___        .\"\\> \\Y/|<'.  '._.-'       /  \\ \\_\\/ /  '-' /       | --'\\_/|/ |   _/       |___.-' |  |`'`         |     |  |         |    / './        /__./` | |           \\   | |            \\  | |            ;  | |            /  | |      jgs  |___\\_.\\_           `-\"--'---'",
  "repository": {
    "type": "git",
    "url": "git://github.com/defunkt/jquery-pjax.git"
  }
}